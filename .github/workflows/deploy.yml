name: Deploy to VM Server

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Populate React app's env
        run: |
          sed -i "s|REACT_APP_SITE_SECRET=.*|REACT_APP_SITE_SECRET=${{ secrets.SITE_SECRET }}|g" .env.prod

      - name: Build and push image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/recaptcha-service:latest \
            -f Dockerfile . \
            --push

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.VM_SSH_KEY }}" | tr -d '\r' | base64 --decode > private_key.pem && chmod 600 private_key.pem

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOSTNAME }} 'echo "SSH connection successful"'

      - name: SSH into VM, pull latest Docker image, and restart container
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOSTNAME }} << 'EOF'
          
          # Pull the latest Docker image from Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/recaptcha-service:latest
        
          # Stop and remove the existing recaptcha-service container
          docker ps -a -q --filter "name=recaptcha-service" | grep -q . && docker rm -f recaptcha-service || echo "No recaptcha-service container to stop/remove"
          
            # Run the frontend container (5000 of VM to 5000 of image) 
            docker run -d --name recaptcha-service -p 5000:5000 \
              ${{ secrets.DOCKER_USERNAME }}/recaptcha-service:latest
          
            echo "Reloading Nginx..."
            sudo systemctl reload nginx
            echo "Nginx reloaded successfully!"
            echo "Deployment completed."
          EOF